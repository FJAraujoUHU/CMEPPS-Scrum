package calculadora;

import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Francisco Javier Araujo Mendoza
 */
public class VentanaModificarConsulta extends javax.swing.JFrame {

    DefaultTableModel datosElemE;
    DefaultTableModel fichE;
    DefaultTableModel datosElemS;
    DefaultTableModel fichS;
    int cierre = -1;
    int tabla;
    int indice;

    //Constantes del estado de la ventana
    public static final int ACTIVA = -1;
    public static final int GUARDAR = 1;
    public static final int CANCELAR = 0;

    /**
     * Creates new form VentanaModificar
     */
    public VentanaModificarConsulta(int tabla, int indice) {
        initComponents();
        datosElemE = (DefaultTableModel) tablaDEE.getModel();
        fichE = (DefaultTableModel) tablaFichE.getModel();
        datosElemS = (DefaultTableModel) tablaDES.getModel();
        fichS = (DefaultTableModel) tablaFichS.getModel(); 
        this.tabla = tabla;
        this.indice = indice;
    }

    public VentanaModificarConsulta(Vector row, int tabla, int indice) {
        initComponents();
        String nombre = (String) row.elementAt(0);
        if (nombre != null) {
            campoNombre.setText(nombre);
        }
        this.fichE = (DefaultTableModel) tablaFichE.getModel();
        List<String> lista = (List<String>) row.elementAt(1);
        if (lista != null) {
            for (int i = 0; i < lista.size(); i++) {
                this.fichE.insertRow(i, new String[]{lista.get(i)});
            }
        }
        this.datosElemE = (DefaultTableModel) tablaDEE.getModel();
        lista = (List<String>) row.elementAt(2);
        if (lista != null) {
            for (int i = 0; i < lista.size(); i++) {
                this.datosElemE.insertRow(i, new String[]{lista.get(i)});
            }
        }
        
        this.fichS = (DefaultTableModel) tablaFichS.getModel();
        lista = (List<String>) row.elementAt(3);
        if (lista != null) {
            for (int i = 0; i < lista.size(); i++) {
                this.fichS.insertRow(i, new String[]{lista.get(i)});
            }
        }
        this.datosElemS = (DefaultTableModel) tablaDES.getModel();
        lista = (List<String>) row.elementAt(4);
        if (lista != null) {
            for (int i = 0; i < lista.size(); i++) {
                this.datosElemS.insertRow(i, new String[]{lista.get(i)});
            }
        }
        
        this.tabla = tabla;
        this.indice = indice;
    }

    public Object[] getDatos() {
        Object[] ret = new Object[5];
        ret[0] = campoNombre.getText();
        ret[1] = new ArrayList<String>();
        for (int i = 0; i < fichE.getRowCount() - 1; i++) {
            ((List) ret[1]).add(fichE.getValueAt(i, 0));
        }
        ret[2] = new ArrayList<String>();
        for (int i = 0; i < datosElemE.getRowCount() - 1; i++) {
            ((List) ret[2]).add(datosElemE.getValueAt(i, 0));
        }
        ret[3] = new ArrayList<String>();
        for (int i = 0; i < fichS.getRowCount() - 1; i++) {
            ((List) ret[3]).add(fichS.getValueAt(i, 0));
        }
        ret[4] = new ArrayList<String>();
        for (int i = 0; i < datosElemS.getRowCount() - 1; i++) {
            ((List) ret[4]).add(datosElemS.getValueAt(i, 0));
        }
        return ret;
    }

    public int getCierre() {
        return cierre;
    }

    public int getTabla() {
        return tabla;
    }

    public int getIndice() {
        return indice;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contenedorNombre = new javax.swing.JPanel();
        campoNombre = new javax.swing.JTextField();
        bGuardar = new javax.swing.JButton();
        bCancelar = new javax.swing.JButton();
        contenedorEntrada = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaDEE = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaFichE = new javax.swing.JTable();
        contenedorEntrada1 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablaDES = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        tablaFichS = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Editar elemento");

        contenedorNombre.setBorder(javax.swing.BorderFactory.createTitledBorder("Nombre"));

        javax.swing.GroupLayout contenedorNombreLayout = new javax.swing.GroupLayout(contenedorNombre);
        contenedorNombre.setLayout(contenedorNombreLayout);
        contenedorNombreLayout.setHorizontalGroup(
            contenedorNombreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorNombreLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(campoNombre)
                .addContainerGap())
        );
        contenedorNombreLayout.setVerticalGroup(
            contenedorNombreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorNombreLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(campoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bGuardar.setText("Guardar");
        bGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGuardarActionPerformed(evt);
            }
        });

        bCancelar.setText("Cancelar");
        bCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCancelarActionPerformed(evt);
            }
        });

        contenedorEntrada.setBorder(javax.swing.BorderFactory.createTitledBorder("Entrada"));

        tablaDEE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Clic para añadir..."}
            },
            new String [] {
                "Datos elementales"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int row, int column)
            {
                if (row == this.getRowCount()-1) return false;
                else return true;
            }

        });
        tablaDEE.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaDEE.getTableHeader().setReorderingAllowed(false);
        tablaDEE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tablaMousePressed(evt);
            }
        });
        tablaDEE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tablaKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(tablaDEE);
        if (tablaDEE.getColumnModel().getColumnCount() > 0) {
            tablaDEE.getColumnModel().getColumn(0).setResizable(false);
        }

        tablaFichE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Clic para añadir..."}
            },
            new String [] {
                "Ficheros"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int row, int column)
            {
                if (row == this.getRowCount()-1) return false;
                else return true;
            }

        });
        tablaFichE.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaFichE.getTableHeader().setReorderingAllowed(false);
        tablaFichE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tablaMousePressed(evt);
            }
        });
        tablaFichE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tablaKeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(tablaFichE);
        if (tablaFichE.getColumnModel().getColumnCount() > 0) {
            tablaFichE.getColumnModel().getColumn(0).setResizable(false);
        }

        javax.swing.GroupLayout contenedorEntradaLayout = new javax.swing.GroupLayout(contenedorEntrada);
        contenedorEntrada.setLayout(contenedorEntradaLayout);
        contenedorEntradaLayout.setHorizontalGroup(
            contenedorEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorEntradaLayout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        contenedorEntradaLayout.setVerticalGroup(
            contenedorEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorEntradaLayout.createSequentialGroup()
                .addGroup(contenedorEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        contenedorEntrada1.setBorder(javax.swing.BorderFactory.createTitledBorder("Salida"));

        tablaDES.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Clic para añadir..."}
            },
            new String [] {
                "Datos elementales"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int row, int column)
            {
                if (row == this.getRowCount()-1) return false;
                else return true;
            }

        });
        tablaDES.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaDES.getTableHeader().setReorderingAllowed(false);
        tablaDES.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tablaMousePressed(evt);
            }
        });
        tablaDES.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tablaKeyPressed(evt);
            }
        });
        jScrollPane5.setViewportView(tablaDES);
        if (tablaDES.getColumnModel().getColumnCount() > 0) {
            tablaDES.getColumnModel().getColumn(0).setResizable(false);
        }

        tablaFichS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Clic para añadir..."}
            },
            new String [] {
                "Ficheros"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int row, int column)
            {
                if (row == this.getRowCount()-1) return false;
                else return true;
            }

        });
        tablaFichS.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaFichS.getTableHeader().setReorderingAllowed(false);
        tablaFichS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tablaMousePressed(evt);
            }
        });
        tablaFichS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tablaKeyPressed(evt);
            }
        });
        jScrollPane6.setViewportView(tablaFichS);
        if (tablaFichS.getColumnModel().getColumnCount() > 0) {
            tablaFichS.getColumnModel().getColumn(0).setResizable(false);
        }

        javax.swing.GroupLayout contenedorEntrada1Layout = new javax.swing.GroupLayout(contenedorEntrada1);
        contenedorEntrada1.setLayout(contenedorEntrada1Layout);
        contenedorEntrada1Layout.setHorizontalGroup(
            contenedorEntrada1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorEntrada1Layout.createSequentialGroup()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        contenedorEntrada1Layout.setVerticalGroup(
            contenedorEntrada1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorEntrada1Layout.createSequentialGroup()
                .addGroup(contenedorEntrada1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(contenedorEntrada, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(contenedorNombre, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(contenedorEntrada1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(bCancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(contenedorNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contenedorEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contenedorEntrada1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bGuardar)
                    .addComponent(bCancelar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tablaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablaKeyPressed
        //Obtener la tabla donde se ha producido el evento
        JTable tabSeleccion = (JTable) evt.getSource();
        DefaultTableModel tm = (DefaultTableModel) tabSeleccion.getModel();
        //Seleccionar el ítem
        int seleccion = tabSeleccion.getSelectedRow();
        int tecla = evt.getKeyCode();

        if (seleccion == tm.getRowCount() - 1) {
            switch (tecla) {
                case KeyEvent.VK_ENTER -> //Actúa como si se hubiese clicado
                    tm.insertRow(seleccion, new String[]{"Nuevo dato"});
                case KeyEvent.VK_DELETE -> {//Borra la lista
                    while (tm.getRowCount() > 1) {
                        tm.removeRow(0);
                    }
                }
            }
        } else if (seleccion != -1) {
            if (tecla == KeyEvent.VK_DELETE) {
                tm.removeRow(seleccion);
            }
        }
    }//GEN-LAST:event_tablaKeyPressed

    private void bGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGuardarActionPerformed
        cierre = GUARDAR;
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_bGuardarActionPerformed

    private void bCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelarActionPerformed
        cierre = CANCELAR;
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_bCancelarActionPerformed

    private void tablaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMousePressed
        //Obtener la tabla donde se ha producido el evento
        JTable tabSeleccion = (JTable) evt.getSource();
        DefaultTableModel tm = (DefaultTableModel) tabSeleccion.getModel();
        //Seleccionar el ítem
        int seleccion = tabSeleccion.rowAtPoint(evt.getPoint());
        tabSeleccion.setRowSelectionInterval(seleccion, seleccion);
        
        if (seleccion == tm.getRowCount() - 1) {
            if (evt.getButton() == 1) {
                tm.insertRow(seleccion, new String[]{"Nuevo dato"});
            }
        } else {
            if (evt.getButton() != 1) {
                tm.removeRow(seleccion);
            } else {
                if ("Nuevo dato".equals((String) tm.getValueAt(seleccion, 0))) {
                    tm.setValueAt("", seleccion, 0);
                }
                tabSeleccion.editCellAt(seleccion, 0);
            }
        }
    }//GEN-LAST:event_tablaMousePressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bCancelar;
    private javax.swing.JButton bGuardar;
    private javax.swing.JTextField campoNombre;
    private javax.swing.JPanel contenedorEntrada;
    private javax.swing.JPanel contenedorEntrada1;
    private javax.swing.JPanel contenedorNombre;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable tablaDEE;
    private javax.swing.JTable tablaDES;
    private javax.swing.JTable tablaFichE;
    private javax.swing.JTable tablaFichS;
    // End of variables declaration//GEN-END:variables
}
